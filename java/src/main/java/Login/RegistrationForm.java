/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Login;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import static com.plaid.InitializeFirestore.db;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author cody6
 */
public class RegistrationForm extends javax.swing.JFrame {

    public int visibilityCounter = 0;
    public String regexPassword = "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!?@#$%]).{8,20}$";
    public String regexEmail = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@" + "[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$";
    public String username = "";
    public String email = "";
    public String password = "";
    public String passwordCheck = "";
    public int unavailableUsername;

    
    /**
     * Creates new form LoginForm
     */
    public RegistrationForm() {
        initComponents();
        usernameErrorMessage.setVisible(false);
        passwordCheckErrorMessage.setVisible(false);
        emailErrorMessage.setVisible(false);
        passwordErrorMessage.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeButton = new javax.swing.JLabel();
        accountableHeader = new javax.swing.JLabel();
        createAccountHeader = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        usernameEntryField = new javax.swing.JTextField();
        passwordEntryField = new javax.swing.JPasswordField();
        checkPasswordEntryField = new javax.swing.JPasswordField();
        checkPasswordLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        emailEntryField = new javax.swing.JTextField();
        returnToLoginButton = new javax.swing.JButton();
        usernameErrorMessage = new javax.swing.JLabel();
        passwordCheckErrorMessage = new javax.swing.JLabel();
        emailErrorMessage = new javax.swing.JLabel();
        passwordErrorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(750, 650));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(750, 650));

        closeButton.setBackground(new java.awt.Color(51, 255, 51));
        closeButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        closeButton.setForeground(new java.awt.Color(75, 75, 75));
        closeButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeButton.setText("X");
        closeButton.setFocusable(false);
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        accountableHeader.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        accountableHeader.setForeground(new java.awt.Color(75, 75, 75));
        accountableHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        accountableHeader.setText("AccountAble");
        accountableHeader.setFocusable(false);

        createAccountHeader.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        createAccountHeader.setForeground(new java.awt.Color(75, 75, 75));
        createAccountHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createAccountHeader.setText("Create Account");
        createAccountHeader.setFocusable(false);

        userLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        userLabel.setForeground(new java.awt.Color(75, 75, 75));
        userLabel.setText("Username");
        userLabel.setFocusable(false);

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(75, 75, 75));
        passwordLabel.setText("Password");
        passwordLabel.setFocusable(false);

        registerButton.setBackground(new java.awt.Color(75, 75, 75));
        registerButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        registerButton.setForeground(new java.awt.Color(255, 255, 255));
        registerButton.setText("REGISTER");
        registerButton.setBorder(null);
        registerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerButton.setFocusable(false);
        registerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registerButtonMouseClicked(evt);
            }
        });

        usernameEntryField.setBackground(new java.awt.Color(75, 75, 75));
        usernameEntryField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        usernameEntryField.setForeground(new java.awt.Color(255, 255, 255));
        usernameEntryField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usernameEntryFieldKeyTyped(evt);
            }
        });

        passwordEntryField.setBackground(new java.awt.Color(75, 75, 75));
        passwordEntryField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        passwordEntryField.setForeground(new java.awt.Color(255, 255, 255));
        passwordEntryField.setEchoChar('\u0000');
        passwordEntryField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordEntryFieldKeyTyped(evt);
            }
        });

        checkPasswordEntryField.setBackground(new java.awt.Color(75, 75, 75));
        checkPasswordEntryField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        checkPasswordEntryField.setForeground(new java.awt.Color(255, 255, 255));
        checkPasswordEntryField.setEchoChar('\u0000');
        checkPasswordEntryField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                checkPasswordEntryFieldKeyTyped(evt);
            }
        });

        checkPasswordLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        checkPasswordLabel.setForeground(new java.awt.Color(75, 75, 75));
        checkPasswordLabel.setText("Confirm Password");
        checkPasswordLabel.setFocusable(false);

        emailLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(75, 75, 75));
        emailLabel.setText("Email Address");
        emailLabel.setFocusable(false);

        emailEntryField.setBackground(new java.awt.Color(75, 75, 75));
        emailEntryField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        emailEntryField.setForeground(new java.awt.Color(255, 255, 255));
        emailEntryField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailEntryFieldKeyTyped(evt);
            }
        });

        returnToLoginButton.setBackground(new java.awt.Color(75, 75, 75));
        returnToLoginButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnToLoginButton.setForeground(new java.awt.Color(255, 255, 255));
        returnToLoginButton.setText("RETURN TO LOGIN");
        returnToLoginButton.setBorder(null);
        returnToLoginButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        returnToLoginButton.setFocusable(false);
        returnToLoginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnToLoginButtonMouseClicked(evt);
            }
        });

        usernameErrorMessage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        usernameErrorMessage.setForeground(new java.awt.Color(75, 75, 75));
        usernameErrorMessage.setText("Username not accepted, hover for more information...");
        usernameErrorMessage.setToolTipText("Username must be between 6 and 20 characters, contain only letters and numbers, and is not case sensitive.");
        usernameErrorMessage.setEnabled(false);
        usernameErrorMessage.setFocusable(false);

        passwordCheckErrorMessage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        passwordCheckErrorMessage.setForeground(new java.awt.Color(75, 75, 75));
        passwordCheckErrorMessage.setText("Passwords do not match, please try again...");
        passwordCheckErrorMessage.setEnabled(false);
        passwordCheckErrorMessage.setFocusable(false);

        emailErrorMessage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailErrorMessage.setForeground(new java.awt.Color(75, 75, 75));
        emailErrorMessage.setText("Please enter a valid email address...");
        emailErrorMessage.setEnabled(false);
        emailErrorMessage.setFocusable(false);

        passwordErrorMessage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        passwordErrorMessage.setForeground(new java.awt.Color(75, 75, 75));
        passwordErrorMessage.setText("Password not accepted, hover for more information...");
        passwordErrorMessage.setToolTipText("Password must have one numeric, one uppercase, one lowercase, \none special character from '!?@#$%', and be 8-20 characters in length.");
        passwordErrorMessage.setEnabled(false);
        passwordErrorMessage.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createAccountHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(accountableHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(registerButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emailEntryField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkPasswordEntryField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordEntryField)
                            .addComponent(usernameEntryField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(returnToLoginButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(emailErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(usernameErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(50, 50, 50))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(passwordErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(checkPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(passwordCheckErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 96, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountableHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(createAccountHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(usernameErrorMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordErrorMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkPasswordLabel)
                    .addComponent(passwordCheckErrorMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkPasswordEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailErrorMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnToLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(750, 650));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void checkPasswordEntryFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkPasswordEntryFieldKeyTyped
        passwordCheckErrorMessage.setVisible(false);
        passwordErrorMessage.setVisible(false);
        // Disallow spaces in password
        if(Character.isSpaceChar(evt.getKeyChar())){
            evt.consume();
        }  
    }//GEN-LAST:event_checkPasswordEntryFieldKeyTyped

    private void passwordEntryFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordEntryFieldKeyTyped
        passwordCheckErrorMessage.setVisible(false);
        passwordErrorMessage.setVisible(false);
        // Disallow spaces in password
        if(Character.isSpaceChar(evt.getKeyChar())){
            evt.consume();
        }  
    }//GEN-LAST:event_passwordEntryFieldKeyTyped

    private void usernameEntryFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameEntryFieldKeyTyped
        usernameErrorMessage.setVisible(false);
        // Allow only alphanumeric char in username
        if(!(Character.isLetterOrDigit(evt.getKeyChar()))){
            evt.consume();
        }
    }//GEN-LAST:event_usernameEntryFieldKeyTyped

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeButtonMouseClicked

    private void emailEntryFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailEntryFieldKeyTyped
        emailErrorMessage.setVisible(false);
        // allow letters, numbers, or @ - _ . for email
        if(!(Character.isLetterOrDigit(evt.getKeyChar()) || evt.getKeyChar() == '@' || evt.getKeyChar() == '-' || evt.getKeyChar() == '_' || evt.getKeyChar() == '.')){
            evt.consume();
        }
    }//GEN-LAST:event_emailEntryFieldKeyTyped

    private void returnToLoginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnToLoginButtonMouseClicked
        // Switch to Login form
        this.setVisible(false);
        new LoginForm().setVisible(true);
    }//GEN-LAST:event_returnToLoginButtonMouseClicked

    private void registerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerButtonMouseClicked
        try {
            username = usernameEntryField.getText().toLowerCase();
            email = emailEntryField.getText().toLowerCase();
            password = String.valueOf(passwordEntryField.getPassword());
            passwordCheck = String.valueOf(checkPasswordEntryField.getPassword());
            unavailableUsername = 0;
            
            // asynchronously retrieve all documents
            ApiFuture<QuerySnapshot> future = db.collection("users").get();
            List<QueryDocumentSnapshot> users = future.get().getDocuments();
            for (QueryDocumentSnapshot user : users) {
                String userId = user.getId().toLowerCase();
                // Ends search if matching username in database
                if (username.equals(userId)){
                    usernameErrorMessage.setText("Username unavailable, please choose a new username...");
                    usernameErrorMessage.setVisible(true);
                    unavailableUsername = 1;
                    break;
                }
            }
            // Registers profile if criteria is met
            if (unavailableUsername == 0){  
                Pattern patternPassword = Pattern.compile(regexPassword);
                Matcher matcherPassword = patternPassword.matcher(password);
                Pattern patternEmail = Pattern.compile(regexEmail);
                Matcher matcherEmail = patternEmail.matcher(email);
                if (username.length() < 6 || username.length() > 20){
                    usernameErrorMessage.setText("Username not accepted, hover for more information...");
                    usernameErrorMessage.setVisible(true);
                } else if (!matcherPassword.matches()){
                    passwordErrorMessage.setVisible(true);
                } else if (!password.equals(passwordCheck)){
                    passwordCheckErrorMessage.setVisible(true);
                } else if (!matcherEmail.matches()){
                    emailErrorMessage.setVisible(true);
                }
                else {
                    Map<String, Object> data = new HashMap<>();
                    data.put("email", email);
                    data.put("password", password);
                    db.collection("users").document(username).set(data);
                    usernameEntryField.setFocusable(false);
                    passwordEntryField.setFocusable(false);
                    checkPasswordEntryField.setFocusable(false);
                    emailEntryField.setFocusable(false);
                    registerButton.setEnabled(false);
                    registerButton.setVisible(false);
                    createAccountHeader.setText("Account successfully created! You may now log in...");
                }
            }
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_registerButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrationForm().setVisible(true);
            }
        });
        


        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountableHeader;
    private javax.swing.JPasswordField checkPasswordEntryField;
    private javax.swing.JLabel checkPasswordLabel;
    private javax.swing.JLabel closeButton;
    private javax.swing.JLabel createAccountHeader;
    private javax.swing.JTextField emailEntryField;
    private javax.swing.JLabel emailErrorMessage;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel passwordCheckErrorMessage;
    private javax.swing.JPasswordField passwordEntryField;
    private javax.swing.JLabel passwordErrorMessage;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JButton returnToLoginButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField usernameEntryField;
    private javax.swing.JLabel usernameErrorMessage;
    // End of variables declaration//GEN-END:variables
}
